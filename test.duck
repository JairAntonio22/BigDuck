#| Test program for BigDuck Programming language |#
var global int;

#| Returns the factorial for a given number|#
proc factorial(n int) -> int {
    if n < 1 {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

#| Returns the first n primes |#
proc getprimes(n int) -> [100]int
var primes [100]int, k, i, prime_count int, is_prime bool;
{
    primes[0] <- 2;
    primes[1] <- 3;
    prime_count <- 2;

    loop k <- 5; prime_count < n; k <- k + 2 {
        is_prime <- true;

        loop i <- 0; i < prime_count; i <- i + 1 {
            if mod(k, primes[i]) = 0 {
                is_prime <- false;
                break;
            }
        }

        if is_prime {
            primes[prime_count] <- k;
            prime_count <- prime_count + 1;
        }
    }

    return primes;
}

proc average(v []float) -> float
var i int, ans float
{
    ans <- 0;

    for i <- 0; i < len(v); i <- i + 1 {
        ans <- ans + v[i];
    }

    return ans / len(v);
}

#| Main procedure |#
proc main()
var primes [100], n, fact_n int;
{
#| Factorial example |#
    n <- 5;
    fact_n <- factorial(n);
    print("The factorial of", n "is", fact_n);

#| Prime sieve example |#
    n <- 25;
    primes <- getprimes(n);

    print("The first", n, "primes are");
    print(primes);
}
