var global int;

proc factorial(n int) -> int {
    if n < 1 {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

proc getprimes(n int)
    var primes [100]int;
    var is_prime bool;
    var k, i, prime_count int;
{
    if n < 0 {
        return;
    } else if n > 100 {
        n <- 100;
    }

    primes[0] <- 2;
    primes[1] <- 3;
    prime_count <- 2;

    loop k <- 5; prime_count < n; k <- k + 2 {
        is_prime <- true;

        loop i <- 0; i < prime_count; i <- i + 1 {
            if mod(k, primes[i]) = 0 {
                is_prime <- false;
                break;
            }
        }

        if is_prime {
            primes[prime_count] <- k;
            prime_count <- prime_count + 1;
        }
    }

    print("The first", n, "primes are");

    loop i <- 0; i < n; i <- i + 1 {
        print(primes[i]);
    }
}

proc aux(i, f0, f1 int) -> int {
    if i = 0 {
        return f0;
    } else {
        return aux(i - 1, f1, f0 + f1);
    }
}

proc fibonacci(n int) -> int {
    return aux(n, 0, 1);
}

proc abs(x float) -> float {
    if x < 0 {
        return -1 * x;
    } else {
        return x;
    }
}

proc main()
    var primes [100]int;
    var n, fact_n int;
{
    n <- 5;
    fact_n <- factorial(n);
    print("The factorial of", n, "is", fact_n);

    n <- 25;
    primes <- getprimes(n);
}
